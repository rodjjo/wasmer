searchState.loadedDescShard("wasmer_compiler_llvm", 0, "The compiled function kind, used for debugging in the …\nThe InkWell MemoryBuffer type\nThe InkWell ModuleInfo type\nCallbacks to the different LLVM compilation phases.\nA compiler that compiles a WebAssembly module with LLVM, …\nDefines the optimization level used to compile a <code>Module</code>.\nReturns the default value for <code>OptimizationLevel</code>, namely …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe middleware chain.\nWe need to produce different LLVM IR for different …\nMarshall wasm stack values into function parameters.\nGiven a wasm function type, produce an llvm function …\nGiven a function definition, retrieve the parameter that …\nWhether the llvm equivalent of this wasm function has an …\nPack LLVM IR values representing individual wasm values …\nGiven a CallSite, extract the returned values and return …\nImplementation of the <code>Abi</code> trait for the Aarch64 ABI on …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nImplementation of the <code>Abi</code> trait for the AMD64 SystemV ABI.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA compiler that compiles a WebAssembly module with LLVM, …\nCompile the module using LLVM, producing a compilation …\nGets the config for this Compiler\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the middlewares for this compiler\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new LLVM compiler\nThe compiled function kind, used for debugging in the …\nThe InkWell MemoryBuffer type\nThe InkWell ModuleInfo type\nCallbacks to the different LLVM compilation phases.\nDefines the optimization level used to compile a <code>Module</code>.\nCallbacks that will triggered in the different compilation …\nTransform it into the compiler.\nEmit code suitable for dlopen.\nWhether to verify compiler IR.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe middleware chain.\nCreates a new configuration object with the default …\nThe optimization levels when optimizing the IR.\nPushes a middleware onto the back of the middleware chain.\nGenerates the target machine for the current target\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCode for dealing with LLVM and VM intrinsics.\nGreatest Exact Float (32 bits) less-than-or-equal-to …\nGreatest Exact Float (32 bits) less-than-or-equal-to …\nGreatest Exact Float (32 bits) less-than-or-equal-to …\nGreatest Exact Float (32 bits) less-than-or-equal-to …\nGreatest Exact Float (64 bits) less-than-or-equal-to …\nGreatest Exact Float (64 bits) less-than-or-equal-to …\nGreatest Exact Float (64 bits) less-than-or-equal-to …\nGreatest Exact Float (64 bits) less-than-or-equal-to …\nLeast Exact Float (32 bits) greater-than-or-equal-to …\nLeast Exact Float (32 bits) greater-than-or-equal-to …\nLeast Exact Float (32 bits) greater-than-or-equal-to …\nLeast Exact Float (32 bits) greater-than-or-equal-to …\nLeast Exact Float (64 bits) greater-than-or-equal-to …\nLeast Exact Float (64 bits) greater-than-or-equal-to …\nLeast Exact Float (64 bits) greater-than-or-equal-to …\nLeast Exact Float (64 bits) greater-than-or-equal-to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe memory moves around.\nStruct containing LLVM and VM intrinsics.\nThe memory is always in the same place.\nCreate an <code>Intrinsics</code> for the given <code>Context</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPHI nodes for stack values in the loop body.")